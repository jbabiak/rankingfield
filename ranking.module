<?php
/**
 * @file
 * An example field using the Field Types API.
 */

/**
 * @defgroup ranking Example: Field Types API
 * @ingroup examples
 * @{
 * Examples using Field Types API.
 *
 * This is updated from Barry Jaspan's presentation at Drupalcon Paris,
 * @link http://acquia.com/community/resources/acquia-tv/intro-field-api-module-developers Video Presentation @endlink
 *
 * Providing a field requires:
 * - Defining a field:
 *   - hook_field_info()
 *   - hook_field_schema()
 *   - hook_field_validate()
 *   - hook_field_is_empty()
 *
 * - Defining a formatter for the field (the portion that outputs the field for
 *   display):
 *   - hook_field_formatter_info()
 *   - hook_field_formatter_view()
 *
 * - Defining a widget for the edit form:
 *   - hook_field_widget_info()
 *   - hook_field_widget_form()
 *
 * Our module defines the field in ranking_field_info(),
 * ranking_field_validate() and ranking_field_is_empty().
 * ranking_field_schema() is implemented in ranking.install.
 *
 * Our module sets up a formatter in ranking_field_formatter_info() and
 * ranking_field_formatter_view(). These are the API hooks that present
 * formatted and themed output to the user.
 *
 * And finally, our module defines the widget in
 * ranking_field_widget_info() and ranking_field_widget_form().
 * The widget is the form element used to receive input from the user
 * when the field is being populated.
 *
 * @see field_types
 * @see field
 */

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function ranking_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'ranking_list' => array(
      'label' => t('Ranking'),
      'description' => t('Demonstrates a field composed of an list color.'),
      'instance_settings' => array('list_option' => ''),
      'default_widget' => 'ranking_text',
      'default_formatter' => 'ranking_simple_text',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 * We want to verify that the items only contain list hex values like
 * this: #RRGGBB. If the item validates, we do nothing. If it doesn't
 * validate, we add our own error notification to the $errors parameter.
 *
 * @see ranking_field_widget_error()
 */
function ranking_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {

  }
}


/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function ranking_field_is_empty($item, $field) {
  return empty($item['list']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have two different types of formatters
 * for this field. One will change the text color, and the other will
 * change the background color.
 *
 * @see ranking_field_formatter_view()
 */
function ranking_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'ranking_simple_text' => array(
      'label' => t('Simple text-based formatter'),
      'field types' => array('ranking_list'),
    ),
    // This formatter changes the background color of the content region.
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Two formatters are implemented.
 * - ranking_simple_text just outputs markup indicating the color that
 *   was entered and uses an inline style to set the text color to that value.
 * - ranking_color_background does the same but also changes the
 *   background color of div.region-content.
 *
 * @see ranking_field_formatter_info()
 */
//submission view
function ranking_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $i = 0;
  foreach ($items as $delta => $item) {
    dpm($item);
    dpm($instance, 'element');
    dpm($field, 'field');
    $element[$delta] = array(
      // We create a render array to produce the desired markup,
      // "<p style="color: #hexcolor">The color code ... #hexcolor</p>".
      // See theme_html_tag().
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#attributes' => array(
        'style' => 'color: blue;',
      ),
      '#value' => t('Choice # @rank is @list', array('@rank' => $instance['settings'][$i]['list_option'], '@list' => $item['list'])),
    );
    $i++;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * Three widgets are provided.
 * - A simple text-only widget where the user enters the '#ffffff'.
 * - A 3-textfield widget that gathers the red, green, and blue values
 *   separately.
 * - A farbtastic colorpicker widget that chooses the value graphically.
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see ranking_field_widget_form()
 */
//widget select
function ranking_field_widget_info() {
  return array(
    'ranking_text' => array(
      'label' => t('list value as #ffffff'),
      'field types' => array('ranking_list'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * We provide one of three different forms, depending on the widget type of
 * the Form API item provided.
 *
 * The 'ranking_colorpicker' and 'ranking_text' are essentially
 * the same, but ranking_colorpicker adds a javascript colorpicker
 * helper.
 *
 * ranking_3text displays three text fields, one each for red, green,
 * and blue. However, the field type defines a single text column,
 * list, which needs an HTML color spec. Define an element validate
 * handler that converts our r, g, and b fields into a simulated single
 * 'list' form element.
 */
function ranking_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['list']) ? $items[$delta]['list'] : '';
  $option_delta = $delta + 1;
  $options = array(
    1 => "First",
    2 => "Second",
    3 => "Third",
  );
  $widget = $element;
  //$widget['#delta'] = ($delta+1);
  $widget['#attached'] = array(
      'css' => array(
        drupal_get_path('module', 'ranking') . '/ranking.css'),
           );

  dpm($widget);
  $widget += array(
    '#type' => 'textfield',
    //'#options' => $options,
    // Allow a slightly larger size that the field length to allow for some
    // configurations where all characters won't fit in input field.
    '#default_value' => $value,
    '#suffix' => $instance['settings'][$delta]['list_option'],
  );

  //dpm($options[$delta], 'option');
  $element['list'] = $widget;
  return $element;
}

function ranking_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  dpm($instance);
  dpm($field);
  for ($i = 0; $i < $field['cardinality']; $i++) {
    $form[$i]['list_option'] = array(
      '#type' => 'textfield',
      '#title' => t('List Option ' . $i),
      '#default_value' => $settings[$i]['list_option'],
      '#description' => t('The minimum value that should be allowed in this field. Leave blank for no minimum.'),
    );
  }
  return $form;
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see ranking_field_validate()
 * @see form_error()
 */
function ranking_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'ranking_invalid':
      form_error($element, $error['message']);
      break;
  }
}


/**
 * Implements hook_menu().
 *
 * Provides a simple user interface that tells the developer where to go.
 */
function ranking_menu() {
  $items['fields/ranking'] = array(
    'title' => 'Field Ranking',
    'page callback' => '_ranking_page',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * A simple page to explain to the developer what to do.
 */
function _ranking_page() {
  return t("The Field Example provides a field composed of an HTML list value, like #ff00ff. To use it, add the field to a content type.");
}
/**
 * @} End of "defgroup ranking".
 */
