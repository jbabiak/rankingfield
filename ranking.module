<?php
/**
 * @file
 * An example field using the Field Types API.
 */

/**
 * @defgroup ranking Example: Field Types API
 * @ingroup examples
 * @{
 * Examples using Field Types API.
 *
 * This is updated from Barry Jaspan's presentation at Drupalcon Paris,
 * @link http://acquia.com/community/resources/acquia-tv/intro-field-api-module-developers Video Presentation @endlink
 *
 * Providing a field requires:
 * - Defining a field:
 *   - hook_field_info()
 *   - hook_field_schema()
 *   - hook_field_validate()
 *   - hook_field_is_empty()
 *
 * - Defining a formatter for the field (the portion that outputs the field for
 *   display):
 *   - hook_field_formatter_info()
 *   - hook_field_formatter_view()
 *
 * - Defining a widget for the edit form:
 *   - hook_field_widget_info()
 *   - hook_field_widget_form()
 *
 * Our module defines the field in ranking_field_info(),
 * ranking_field_validate() and ranking_field_is_empty().
 * ranking_field_schema() is implemented in ranking.install.
 *
 * Our module sets up a formatter in ranking_field_formatter_info() and
 * ranking_field_formatter_view(). These are the API hooks that present
 * formatted and themed output to the user.
 *
 * And finally, our module defines the widget in
 * ranking_field_widget_info() and ranking_field_widget_form().
 * The widget is the form element used to receive input from the user
 * when the field is being populated.
 *
 * @see field_types
 * @see field
 */

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function ranking_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'ranking_list' => array(
      'label' => t('Ranking'),
      'description' => t('Creates a ranking field.'),
      'instance_settings' => array('list_option' => ''),
      'default_widget' => 'ranking_text',
      'default_formatter' => 'ranking_simple_text',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 *
 * @see ranking_field_widget_error()
 */
function ranking_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
//#todo
}


/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function ranking_field_is_empty($item, $field) {
  return empty($item['selection']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * @see ranking_field_formatter_view()
 */
function ranking_field_formatter_info() {
  return array(
    'ranking_simple_text' => array(
      'label' => t('Simple text-based formatter'),
      'field types' => array('ranking_list'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see ranking_field_formatter_info()
 **/
function ranking_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $i = 0;
  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#type' => 'html_tag',
      '#tag' => 'p',
      //'#attributes' => array(
      //  'style' => 'color: blue;',
      //),
      '#value' => t('#@rank : @option', array('@rank' => $item['selection'], '@option' => $instance['settings'][$i]['list_option'])),
    );
    $i++;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 * @see ranking_field_widget_form()
 */
function ranking_field_widget_info() {
  return array(
    'ranking_text' => array(
      'label' => t('Simple Select'),
      'field types' => array('ranking_list'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 */
function ranking_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['selection']) ? $items[$delta]['selection'] : '';

  if (!isset($instance['settings'][$delta]['list_option'])) {
    $instance['settings'][$delta]['list_option'] = '';
  }
  $options[0] = 'Select';
  for ($i = 1; $i <= $field['cardinality']; $i++) {
      $options[$i] = $i;
  }
  dpm($options);
  $widget = $element;
  $widget['#attached'] = array(
      'css' => array(
        drupal_get_path('module', 'ranking') . '/ranking.css'),
           );

  $widget += array(
    '#type' => 'select',
    '#options' => $options,
    '#name' => 'rank-select',
    '#default_value' => ($delta+1),
    '#prefix' => $instance['settings'][$delta]['list_option']
  );

  $element['selection'] = $widget;
  $form = array(
    '#attached' => array(
      // Add javascript
      'js' => array(drupal_get_path('module', 'ranking') . '/ranking.js'),
    ),
  );
  return $element;
}

function ranking_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  for ($i = 0; $i < $field['cardinality']; $i++) {
    if (!isset($settings[$i]['list_option'])) {
      $settings[$i]['list_option'] = 'Enter text to be displayed here';
    }
    $form[$i]['list_option'] = array(
      '#type' => 'textarea',
      '#title' => t('List Option ' . ($i + 1)),
      '#default_value' => $settings[$i]['list_option'],
      '#description' => t('The option and description that users will see.'),
    );
  }
  return $form;
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see ranking_field_validate()
 * @see form_error()
 */
function ranking_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'ranking_invalid':
      form_error($element, $error['message']);
      break;
  }
}


/**
 * Implements hook_menu().
 *
 * Provides a simple user interface that tells the developer where to go.
 */
function ranking_menu() {
  $items['fields/ranking'] = array(
    'title' => 'Field Ranking',
    'page callback' => '_ranking_page',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * A simple page to explain to the developer what to do.
 */
function _ranking_page() {
  return t("needs to be updated");
}
/**
 * @} End of "defgroup ranking".
 */
